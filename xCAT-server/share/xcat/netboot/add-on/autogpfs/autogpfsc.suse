#! /bin/sh
# Copyright (c) 1995-2000 SuSE GmbH Nuernberg, Germany.
# Copyright (c) 2001 IBM
#
# Author: Kurt Garloff <feedback@suse.de>
# Author: Egan Ford <egan@us.ibm.com
#
# init.d/autogpfsc
#
#   and symbolic its link
#
# /usr/sbin/rcautogpfsc
#
# System startup script for the nessus backend nessusd
#
### BEGIN INIT INFO
# Provides: autogpfsc
# Required-Start: $remote_fs $syslog
# Required-Stop:  $remote_fs $syslog
# Default-Start:  3 5
# Default-Stop:   0 1 2 6
# Description:    Start autogpfsc to allow XY and provide YZ.
### END INIT INFO

# Source SuSE config
if [ -r /etc/rc.config ]
then
	. /etc/rc.config
fi
if [ -r /etc/sysconfig/autogpfsc ]
then
	. /etc/sysconfig/autogpfsc
fi

# Determine the base and follow a runlevel link name.
base=${0##*/}
link=${base#*[SK][0-9][0-9]}

# Force execution if not called by a runlevel directory.
#test $link = $base && START_AUTOGPFSC=yes
#test "$START_AUTOGPFSC" = yes || exit 0

AUTOGPFSC=/usr/sbin/autogpfsc.pl
test -x $AUTOGPFSC || exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
	echo "Starting autoGPFS"
	## Start daemon with startproc(8). If this fails
	## the echo return value is set appropriate.

	# NOTE: startproc return 0, even if service is 
	# already running to match LSB spec.


	lastexit=2
	while [ "$lastexit" = "2" ]
	do
		for i in $(echo $SERVERS | tr ',' ' ')
		do
			/usr/sbin/autogpfsc.pl $i $PORT 2>/dev/null
			lastexit=$?
			if [ "$lastexit" = "0" ]
			then
				break
			fi
			if [ "$lastexit" = "1" ]
			then
				break
			fi
		done
		sleep 1
	done

	if [ "$lastexit" != "0" ]
	then
		BLOCK=no
	fi

	sleep 5

	if [ "$BLOCK" = "yes" ]
	then
		echo -n "Waiting on GPFS mounts..."
		DOBLOCK=yes
	fi

	while [ "$DOBLOCK" = "yes" ]
	do
		DOBLOCK=no

		for i in $(
			grep "\bgpfs\b" /etc/fstab | \
			awk '{print $2}'
		)
		do
			mount | grep "\b/gpfs1\b" >/dev/null 2>&1
			if [ "$?" != "0" ]
			then
				DOBLOCK=yes
			fi
		done

		sleep 1
	done

	if [ "$BLOCK" = "yes" ]
	then
		echo "done"
	fi

	echo -n "autoGPFS"
	if [ "$lastexit" = "0" ]
	then
		true
	else
		false
	fi

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down GPFS"
	## Stop daemon with killproc(8) and if this fails
	## set echo the echo return value.

	/usr/lpp/mmfs/bin/mmshutdown

	# Remember status and be verbose
	rc_status -v
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
#    status)
#	echo -n "Checking for autogpfsc: "
#	## Check status with checkproc(8), if process is running
#	## checkproc will return with exit status 0.
#
#	# Status has a slightly different for the status command:
#	# 0 - service running
#	# 1 - service dead, but /var/run/  pid  file exists
#	# 2 - service dead, but /var/lock/ lock file exists
#	# 3 - service not running
#
#	# NOTE: checkproc returns LSB compliant status values.
#	checkproc $AUTOGPFSC
#	rc_status -v
#	;;
    *)
	echo "Usage: $0 {start|stop|restart}"
	exit 1
	;;
esac
rc_exit
